import React from "react";
import { render, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import Contacts from '../Contacts';

// Mock the redux store
const store = createStore(() => ({
  interlocuteur: { value: null },
}));

// Mock localStorage
Storage.prototype.getItem = jest.fn(() => 'chat-user');

// Mock useSocketContext
jest.mock('../../../context/SocketContext', () => ({
  useSocketContext: jest.fn(() => ({ onlineUsers: [] })),
}));

// Mock useListenMessages
jest.mock('../../../hooks/useListenMessages', () => jest.fn());


// Mock fetch
global.fetch = jest.fn(() =>
  Promise.resolve({
    json: () => Promise.resolve([{ _id: '1', fullName: 'Test User', profilePic: 'test.png' }]),
  })
);

// test if the app is rendered without crashing
// test('renders Login component without crashing', () => {
//   render(
//     <Provider store={store}>
//       <Contacts />
//     </Provider>
//   );
// });

describe('Contacts component', () => {
  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Contacts />
      </Provider>
    );
  });
});